/**
 * PullRequestTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import {TagAbstract, HttpRequest} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {CommentCollection} from "./CommentCollection";
import {CommentCreate} from "./CommentCreate";
import {Message} from "./Message";
import {MessageException} from "./MessageException";
import {Passthru} from "./Passthru";
import {PullRequest} from "./PullRequest";
import {PullRequestCollection} from "./PullRequestCollection";
import {PullRequestCreate} from "./PullRequestCreate";

export class PullRequestTag extends TagAbstract {
    /**
     * Reacts to a comment
     *
     * @returns {Promise<Message>}
     * @throws {MessageException}
     * @throws {ClientException}
     */
    public async reactComment(user: string, document: string, id: string, comment: string, reaction: string, payload: Passthru): Promise<Message> {
        const url = this.parser.url('/document/:user/:document/pull_request/:id/comment/:comment/:reaction', {
            'user': user,
            'document': document,
            'id': id,
            'comment': comment,
            'reaction': reaction,
        });

        let request: HttpRequest = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as Message;
        }

        const statusCode = response.status;
        if (statusCode === 400) {
            throw new MessageException(await response.json() as Message);
        }

        if (statusCode === 404) {
            throw new MessageException(await response.json() as Message);
        }

        if (statusCode === 500) {
            throw new MessageException(await response.json() as Message);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Creates a new pull request comment
     *
     * @returns {Promise<Message>}
     * @throws {MessageException}
     * @throws {ClientException}
     */
    public async createComment(user: string, document: string, id: string, payload: CommentCreate): Promise<Message> {
        const url = this.parser.url('/document/:user/:document/pull_request/:id/comment', {
            'user': user,
            'document': document,
            'id': id,
        });

        let request: HttpRequest = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as Message;
        }

        const statusCode = response.status;
        if (statusCode === 400) {
            throw new MessageException(await response.json() as Message);
        }

        if (statusCode === 404) {
            throw new MessageException(await response.json() as Message);
        }

        if (statusCode === 500) {
            throw new MessageException(await response.json() as Message);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Shows all pull request comments
     *
     * @returns {Promise<CommentCollection>}
     * @throws {MessageException}
     * @throws {ClientException}
     */
    public async getAllComments(user: string, document: string, id: string, startIndex?: number, count?: number, search?: string): Promise<CommentCollection> {
        const url = this.parser.url('/document/:user/:document/pull_request/:id/comment', {
            'user': user,
            'document': document,
            'id': id,
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'startIndex': startIndex,
                'count': count,
                'search': search,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as CommentCollection;
        }

        const statusCode = response.status;
        if (statusCode === 400) {
            throw new MessageException(await response.json() as Message);
        }

        if (statusCode === 404) {
            throw new MessageException(await response.json() as Message);
        }

        if (statusCode === 500) {
            throw new MessageException(await response.json() as Message);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Removes a pull request
     *
     * @returns {Promise<Message>}
     * @throws {MessageException}
     * @throws {ClientException}
     */
    public async delete(user: string, document: string, id: string): Promise<Message> {
        const url = this.parser.url('/document/:user/:document/pull_request/:id', {
            'user': user,
            'document': document,
            'id': id,
        });

        let request: HttpRequest = {
            url: url,
            method: 'DELETE',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as Message;
        }

        const statusCode = response.status;
        if (statusCode === 400) {
            throw new MessageException(await response.json() as Message);
        }

        if (statusCode === 404) {
            throw new MessageException(await response.json() as Message);
        }

        if (statusCode === 500) {
            throw new MessageException(await response.json() as Message);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Merges a pull request
     *
     * @returns {Promise<Message>}
     * @throws {MessageException}
     * @throws {ClientException}
     */
    public async update(user: string, document: string, id: string, payload: Passthru): Promise<Message> {
        const url = this.parser.url('/document/:user/:document/pull_request/:id', {
            'user': user,
            'document': document,
            'id': id,
        });

        let request: HttpRequest = {
            url: url,
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as Message;
        }

        const statusCode = response.status;
        if (statusCode === 400) {
            throw new MessageException(await response.json() as Message);
        }

        if (statusCode === 404) {
            throw new MessageException(await response.json() as Message);
        }

        if (statusCode === 500) {
            throw new MessageException(await response.json() as Message);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Creates a new pull request
     *
     * @returns {Promise<Message>}
     * @throws {MessageException}
     * @throws {ClientException}
     */
    public async create(user: string, document: string, payload: PullRequestCreate): Promise<Message> {
        const url = this.parser.url('/document/:user/:document/pull_request', {
            'user': user,
            'document': document,
        });

        let request: HttpRequest = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as Message;
        }

        const statusCode = response.status;
        if (statusCode === 400) {
            throw new MessageException(await response.json() as Message);
        }

        if (statusCode === 404) {
            throw new MessageException(await response.json() as Message);
        }

        if (statusCode === 500) {
            throw new MessageException(await response.json() as Message);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns a pull request
     *
     * @returns {Promise<PullRequest>}
     * @throws {MessageException}
     * @throws {ClientException}
     */
    public async get(user: string, document: string, id: string): Promise<PullRequest> {
        const url = this.parser.url('/document/:user/:document/pull_request/:id', {
            'user': user,
            'document': document,
            'id': id,
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as PullRequest;
        }

        const statusCode = response.status;
        if (statusCode === 400) {
            throw new MessageException(await response.json() as Message);
        }

        if (statusCode === 404) {
            throw new MessageException(await response.json() as Message);
        }

        if (statusCode === 500) {
            throw new MessageException(await response.json() as Message);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns all pull requests
     *
     * @returns {Promise<PullRequestCollection>}
     * @throws {MessageException}
     * @throws {ClientException}
     */
    public async getAll(user: string, document: string, status?: number, startIndex?: number, count?: number, search?: string): Promise<PullRequestCollection> {
        const url = this.parser.url('/document/:user/:document/pull_request', {
            'user': user,
            'document': document,
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'status': status,
                'startIndex': startIndex,
                'count': count,
                'search': search,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as PullRequestCollection;
        }

        const statusCode = response.status;
        if (statusCode === 400) {
            throw new MessageException(await response.json() as Message);
        }

        if (statusCode === 404) {
            throw new MessageException(await response.json() as Message);
        }

        if (statusCode === 500) {
            throw new MessageException(await response.json() as Message);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }



}
