/**
 * TagTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import axios, {AxiosRequestConfig} from "axios";
import {TagAbstract} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {Message} from "./Message";
import {MessageException} from "./MessageException";
import {Passthru} from "./Passthru";
import {Tag} from "./Tag";
import {TagChangelog} from "./TagChangelog";
import {TagCollection} from "./TagCollection";

export class TagTag extends TagAbstract {
    /**
     * Generates the changelog for the current release
     *
     * @returns {Promise<TagChangelog>}
     * @throws {MessageException}
     * @throws {ClientException}
     */
    public async changelog(user: string, document: string, payload: Passthru): Promise<TagChangelog> {
        const url = this.parser.url('/document/:user/:document/changelog', {
            'user': user,
            'document': document,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        try {
            const response = await this.httpClient.request<TagChangelog>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                const statusCode = error.response.status;

                if (statusCode === 400) {
                    throw new MessageException(error.response.data);
                }

                if (statusCode === 404) {
                    throw new MessageException(error.response.data);
                }

                if (statusCode === 500) {
                    throw new MessageException(error.response.data);
                }

                throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * Creates a new tag
     *
     * @returns {Promise<Message>}
     * @throws {MessageException}
     * @throws {ClientException}
     */
    public async create(user: string, document: string, payload: Passthru): Promise<Message> {
        const url = this.parser.url('/document/:user/:document/tag', {
            'user': user,
            'document': document,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        try {
            const response = await this.httpClient.request<Message>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                const statusCode = error.response.status;

                if (statusCode === 400) {
                    throw new MessageException(error.response.data);
                }

                if (statusCode === 404) {
                    throw new MessageException(error.response.data);
                }

                if (statusCode === 500) {
                    throw new MessageException(error.response.data);
                }

                throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * Returns a tag
     *
     * @returns {Promise<Tag>}
     * @throws {MessageException}
     * @throws {ClientException}
     */
    public async get(user: string, document: string, id: string): Promise<Tag> {
        const url = this.parser.url('/document/:user/:document/tag/:id', {
            'user': user,
            'document': document,
            'id': id,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        try {
            const response = await this.httpClient.request<Tag>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                const statusCode = error.response.status;

                if (statusCode === 400) {
                    throw new MessageException(error.response.data);
                }

                if (statusCode === 404) {
                    throw new MessageException(error.response.data);
                }

                if (statusCode === 500) {
                    throw new MessageException(error.response.data);
                }

                throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * Returns all tags for a document
     *
     * @returns {Promise<TagCollection>}
     * @throws {MessageException}
     * @throws {ClientException}
     */
    public async getAll(user: string, document: string, startIndex?: number, count?: number, search?: string): Promise<TagCollection> {
        const url = this.parser.url('/document/:user/:document/tag', {
            'user': user,
            'document': document,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'startIndex': startIndex,
                'count': count,
                'search': search,
            }, [
            ]),
        };

        try {
            const response = await this.httpClient.request<TagCollection>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                const statusCode = error.response.status;

                if (statusCode === 400) {
                    throw new MessageException(error.response.data);
                }

                if (statusCode === 404) {
                    throw new MessageException(error.response.data);
                }

                if (statusCode === 500) {
                    throw new MessageException(error.response.data);
                }

                throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * Triggers a tag
     *
     * @returns {Promise<Tag>}
     * @throws {MessageException}
     * @throws {ClientException}
     */
    public async trigger(user: string, document: string, id: string, payload: Passthru): Promise<Tag> {
        const url = this.parser.url('/document/:user/:document/tag/:id/trigger', {
            'user': user,
            'document': document,
            'id': id,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        try {
            const response = await this.httpClient.request<Tag>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                const statusCode = error.response.status;

                if (statusCode === 400) {
                    throw new MessageException(error.response.data);
                }

                if (statusCode === 404) {
                    throw new MessageException(error.response.data);
                }

                if (statusCode === 500) {
                    throw new MessageException(error.response.data);
                }

                throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }


}
